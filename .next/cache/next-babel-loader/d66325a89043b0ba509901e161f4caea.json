{"ast":null,"code":"var _jsxFileName = \"/Users/sabina/Workspace/donut-shop-sabina-stripe/components/CheckoutForm.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport axios from \"axios\";\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({\n  price,\n  onSuccessfulCheckout\n}) => {\n  const {\n    0: isProcessing,\n    1: setProcessingTo\n  } = useState(false);\n  const {\n    0: checkoutError,\n    1: setCheckoutError\n  } = useState();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleFormSubmit = async ev => {\n    ev.preventDefault();\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n    setProcessingTo(true);\n    const cardElement = elements.getElement(CardElement);\n\n    try {\n      const {\n        data: clientSecret\n      } = await axios.post(\"/api/payment_intents\", {\n        amount: price * 100\n      });\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: billingDetails\n      });\n\n      if (paymentMethodReq.error) {\n        setCheckoutError(paymentMethodReq.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      const confrimedCardPayment = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id\n      });\n\n      if (confrimedCardPayment.error) {\n        setCheckoutError(confrimedCardPayment.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      console.log(`Successful payment of $${price}`);\n      onSuccessfulCheckout();\n    } catch (err) {\n      setCheckoutError(err.message);\n    }\n  };\n\n  const CardElementOptions = {\n    style: {\n      base: {\n        fontSize: \"16px\",\n        color: \"#fff\",\n        \"::placeholder\": {\n          color: \"#87bbfd\"\n        }\n      },\n      invalid: {\n        color: \"#FFC7EE\",\n        iconColor: \"#FFC7EE\"\n      }\n    }\n  };\n  return __jsx(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, __jsx(BillingDetailsFields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, __jsx(CardElementContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, __jsx(CardElement, {\n    options: CardElementOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }))), checkoutError && __jsx(CheckoutError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, checkoutError), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, __jsx(SubmitButton, {\n    disabled: isProcessing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, isProcessing ? \"Processing...\" : `Pay $${price}`)));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/sabina/Workspace/donut-shop-sabina-stripe/components/CheckoutForm.jsx"],"names":["useState","styled","axios","Row","BillingDetailsFields","SubmitButton","CheckoutError","CardElement","useElements","useStripe","CardElementContainer","div","CheckoutForm","price","onSuccessfulCheckout","isProcessing","setProcessingTo","checkoutError","setCheckoutError","stripe","elements","handleFormSubmit","ev","preventDefault","billingDetails","name","target","value","email","address","city","line1","state","postal_code","zip","cardElement","getElement","data","clientSecret","post","amount","paymentMethodReq","createPaymentMethod","type","card","billing_details","error","message","confrimedCardPayment","confirmCardPayment","payment_method","paymentMethod","id","console","log","err","CardElementOptions","style","base","fontSize","color","invalid","iconColor"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport axios from \"axios\";\n\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\n\nimport {CardElement, useElements, useStripe} from '@stripe/react-stripe-js';\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({ price, onSuccessfulCheckout }) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleFormSubmit = async ev => {\n    ev.preventDefault();\n\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n    setProcessingTo(true);\n    const cardElement = elements.getElement(CardElement);\n    try {\n      \n      const {data: clientSecret} = await axios.post(\"/api/payment_intents\", {\n        amount: price * 100,\n      });\n\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details : billingDetails\n      });\n\n      if (paymentMethodReq.error) {\n        setCheckoutError(paymentMethodReq.error.message);\n        setProcessingTo(false);\n        return;\n      } \n    \n      const confrimedCardPayment = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id,\n      });\n\n      if (confrimedCardPayment.error) {\n        setCheckoutError(confrimedCardPayment.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      console.log(`Successful payment of $${price}` )\n      onSuccessfulCheckout();\n\n    } catch (err) {\n      setCheckoutError(err.message);\n    }\n\n};\n\n\n  const CardElementOptions = {\n    style: {\n      base: {\n        fontSize: \"16px\",\n        color: \"#fff\",\n        \"::placeholder\" : {\n          color: \"#87bbfd\",\n        },\n      },\n      invalid: {\n        color: \"#FFC7EE\",\n        iconColor: \"#FFC7EE\",\n      },\n    },\n  };\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <Row>\n        <BillingDetailsFields />\n      </Row>\n      <Row>\n        <CardElementContainer>\n          <CardElement options={CardElementOptions}></CardElement>\n        </CardElementContainer>\n      </Row>\n      {checkoutError && <CheckoutError>{checkoutError}</CheckoutError>}\n      <Row>\n        <SubmitButton disabled={isProcessing}>\n          {isProcessing ? \"Processing...\" : `Pay $${price}`}\n        </SubmitButton>\n      </Row>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}
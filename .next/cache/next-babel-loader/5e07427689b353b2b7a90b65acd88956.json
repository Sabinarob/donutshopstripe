{"ast":null,"code":"import Stripe from \"stripe\";\nconst stripe = new Stripe(process.env.SECRET_KEY);\nexport default (async (req, res) => {\n  if (req.method === \"POST\") {\n    try {\n      const {\n        amount\n      } = req.body; // Psst. For production-ready applications we recommend not using the\n      // amount directly from the client without verifying it first. This is to\n      // prevent bad actors from changing the total amount on the client before\n      // it gets sent to the server. A good approach is to send the quantity of\n      // a uniquely identifiable product and calculate the total price server-side.\n      // Then, you would only fulfill orders using the quantity you charged for.\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount,\n        currency: \"usd\",\n        metadata: {\n          integration_check: 'accept_a_payment'\n        }\n      });\n      res.status(200).send(paymentIntent.client_secret);\n    } catch (err) {\n      res.status(500).json({\n        statusCode: 500,\n        message: err.message\n      });\n    }\n  } else {\n    res.setHeader(\"Allow\", \"POST\");\n    res.status(405).end(\"Method Not Allowed\");\n  }\n});","map":{"version":3,"sources":["/Users/sabina/Workspace/donut-shop-sabina-stripe/pages/api/payment_intents.js"],"names":["Stripe","stripe","process","env","SECRET_KEY","req","res","method","amount","body","paymentIntent","paymentIntents","create","currency","metadata","integration_check","status","send","client_secret","err","json","statusCode","message","setHeader","end"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,MAAMC,MAAM,GAAG,IAAID,MAAJ,CAAWE,OAAO,CAACC,GAAR,CAAYC,UAAvB,CAAf;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAaH,GAAG,CAACI,IAAvB,CADE,CAEF;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAMC,aAAa,GAAG,MAAMT,MAAM,CAACU,cAAP,CAAsBC,MAAtB,CAA6B;AACvDJ,QAAAA,MADuD;AAEvDK,QAAAA,QAAQ,EAAE,KAF6C;AAGvDC,QAAAA,QAAQ,EAAE;AAACC,UAAAA,iBAAiB,EAAE;AAApB;AAH6C,OAA7B,CAA5B;AAMAT,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBP,aAAa,CAACQ,aAAnC;AACD,KAhBD,CAgBE,OAAOC,GAAP,EAAY;AACZb,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAEC,QAAAA,UAAU,EAAE,GAAd;AAAmBC,QAAAA,OAAO,EAAEH,GAAG,CAACG;AAAhC,OAArB;AACD;AACF,GApBD,MAoBO;AACLhB,IAAAA,GAAG,CAACiB,SAAJ,CAAc,OAAd,EAAuB,MAAvB;AACAjB,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBQ,GAAhB,CAAoB,oBAApB;AACD;AACF,CAzBD","sourcesContent":["import Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.SECRET_KEY);\n\nexport default async (req, res) => {\n  if (req.method === \"POST\") {\n    try {\n      const { amount } = req.body;\n      // Psst. For production-ready applications we recommend not using the\n      // amount directly from the client without verifying it first. This is to\n      // prevent bad actors from changing the total amount on the client before\n      // it gets sent to the server. A good approach is to send the quantity of\n      // a uniquely identifiable product and calculate the total price server-side.\n      // Then, you would only fulfill orders using the quantity you charged for.\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount,\n        currency: \"usd\",\n        metadata: {integration_check: 'accept_a_payment'},\n      });\n\n      res.status(200).send(paymentIntent.client_secret);\n    } catch (err) {\n      res.status(500).json({ statusCode: 500, message: err.message });\n    }\n  } else {\n    res.setHeader(\"Allow\", \"POST\");\n    res.status(405).end(\"Method Not Allowed\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}